/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API for traces
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AlertConfig
 */
export interface AlertConfig {
    /**
     * 
     * @type {string}
     * @memberof AlertConfig
     */
    'uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertConfig
     */
    'message_expression'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertConfig
     */
    'min_priority'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertConfig
     */
    'duration'?: string;
    /**
     * 
     * @type {number}
     * @memberof AlertConfig
     */
    'min_rate'?: number;
    /**
     * 
     * @type {string}
     * @memberof AlertConfig
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * 
     * @type {string}
     * @memberof Component
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Component
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CreateGroupResponse
 */
export interface CreateGroupResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupResponse
     */
    'uuid': string;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'trace_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'priority': string;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    'fixed': boolean;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'time': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Event
     */
    'payload': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Filters
 */
export interface Filters {
    /**
     * 
     * @type {number}
     * @memberof Filters
     */
    'limit'?: number;
    /**
     * 
     * @type {string}
     * @memberof Filters
     */
    'component'?: string;
}
/**
 * 
 * @export
 * @interface GetAlertConfigListResponse
 */
export interface GetAlertConfigListResponse {
    /**
     * 
     * @type {Array<AlertConfig>}
     * @memberof GetAlertConfigListResponse
     */
    'items'?: Array<AlertConfig>;
}
/**
 * 
 * @export
 * @interface GetAlertListResponse
 */
export interface GetAlertListResponse {
    /**
     * 
     * @type {Array<GetAlertListResponseItemsInner>}
     * @memberof GetAlertListResponse
     */
    'items'?: Array<GetAlertListResponseItemsInner>;
}
/**
 * 
 * @export
 * @interface GetAlertListResponseItemsInner
 */
export interface GetAlertListResponseItemsInner {
    /**
     * 
     * @type {string}
     * @memberof GetAlertListResponseItemsInner
     */
    'uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAlertListResponseItemsInner
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAlertListResponseItemsInner
     */
    'time'?: string;
    /**
     * 
     * @type {Event}
     * @memberof GetAlertListResponseItemsInner
     */
    'event'?: Event;
}
/**
 * 
 * @export
 * @interface GetEventListResponse
 */
export interface GetEventListResponse {
    /**
     * 
     * @type {Array<Event>}
     * @memberof GetEventListResponse
     */
    'items': Array<Event>;
}
/**
 * 
 * @export
 * @interface GetGroupListResponse
 */
export interface GetGroupListResponse {
    /**
     * 
     * @type {Array<GroupPreview>}
     * @memberof GetGroupListResponse
     */
    'active': Array<GroupPreview>;
    /**
     * 
     * @type {Array<GroupPreview>}
     * @memberof GetGroupListResponse
     */
    'fixed': Array<GroupPreview>;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'uuid': string;
    /**
     * 
     * @type {Array<Trace>}
     * @memberof Group
     */
    'traces': Array<Trace>;
}
/**
 * 
 * @export
 * @interface GroupPreview
 */
export interface GroupPreview {
    /**
     * 
     * @type {string}
     * @memberof GroupPreview
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof GroupPreview
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GroupPreview
     */
    'duration': string;
    /**
     * 
     * @type {string}
     * @memberof GroupPreview
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof GroupPreview
     */
    'end': string;
    /**
     * 
     * @type {Array<Event>}
     * @memberof GroupPreview
     */
    'events'?: Array<Event>;
    /**
     * 
     * @type {Array<Component>}
     * @memberof GroupPreview
     */
    'components'?: Array<Component>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface SendEventRequest
 */
export interface SendEventRequest {
    /**
     * 
     * @type {string}
     * @memberof SendEventRequest
     */
    'group_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendEventRequest
     */
    'trace_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendEventRequest
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof SendEventRequest
     */
    'component': string;
    /**
     * 
     * @type {string}
     * @memberof SendEventRequest
     */
    'priority': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SendEventRequest
     */
    'payload'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface StartTraceRequest
 */
export interface StartTraceRequest {
    /**
     * 
     * @type {string}
     * @memberof StartTraceRequest
     */
    'group_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceRequest
     */
    'parent_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceRequest
     */
    'component': string;
}
/**
 * 
 * @export
 * @interface StartTraceResponse
 */
export interface StartTraceResponse {
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'group_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'parent_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'end': string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof StartTraceResponse
     */
    'component': string;
    /**
     * 
     * @type {boolean}
     * @memberof StartTraceResponse
     */
    'finished': boolean;
}
/**
 * 
 * @export
 * @interface Trace
 */
export interface Trace {
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'group_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'parent_uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'end': string;
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Trace
     */
    'component': string;
    /**
     * 
     * @type {boolean}
     * @memberof Trace
     */
    'finished': boolean;
    /**
     * 
     * @type {Array<Trace>}
     * @memberof Trace
     */
    'children': Array<Trace>;
    /**
     * 
     * @type {Array<Event>}
     * @memberof Trace
     */
    'events': Array<Event>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AlertConfig} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertConfig: async (body: AlertConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAlertConfig', 'body', body)
            const localVarPath = `/alert_configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertConfig: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteAlertConfig', 'uuid', uuid)
            const localVarPath = `/alert_configs/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endTrace: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('endTrace', 'uuid', uuid)
            const localVarPath = `/traces/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixAlert: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('fixAlert', 'uuid', uuid)
            const localVarPath = `/alerts/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixEvent: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('fixEvent', 'uuid', uuid)
            const localVarPath = `/events/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertConfigList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alert_configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alerts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getEvent', 'uuid', uuid)
            const localVarPath = `/events/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getGroup', 'uuid', uuid)
            const localVarPath = `/groups/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Filters} filters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupList: async (filters: Filters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filters' is not null or undefined
            assertParamExists('getGroupList', 'filters', filters)
            const localVarPath = `/groups/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendEventRequest} sendEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEvent: async (sendEventRequest: SendEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEventRequest' is not null or undefined
            assertParamExists('sendEvent', 'sendEventRequest', sendEventRequest)
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StartTraceRequest} startTraceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTrace: async (startTraceRequest: StartTraceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTraceRequest' is not null or undefined
            assertParamExists('startTrace', 'startTraceRequest', startTraceRequest)
            const localVarPath = `/traces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startTraceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AlertConfig} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlertConfig(body: AlertConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlertConfig(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlertConfig(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlertConfig(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endTrace(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endTrace(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixAlert(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixAlert(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixEvent(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixEvent(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlertConfigList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlertConfigListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlertConfigList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlertList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAlertListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlertList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Filters} filters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupList(filters: Filters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGroupListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupList(filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendEventRequest} sendEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEvent(sendEventRequest: SendEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEvent(sendEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StartTraceRequest} startTraceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startTrace(startTraceRequest: StartTraceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartTraceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startTrace(startTraceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AlertConfig} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertConfig(body: AlertConfig, options?: any): AxiosPromise<AlertConfig> {
            return localVarFp.createAlertConfig(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(options?: any): AxiosPromise<CreateGroupResponse> {
            return localVarFp.createGroup(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertConfig(uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAlertConfig(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endTrace(uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.endTrace(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixAlert(uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.fixAlert(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixEvent(uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.fixEvent(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertConfigList(options?: any): AxiosPromise<GetAlertConfigListResponse> {
            return localVarFp.getAlertConfigList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertList(options?: any): AxiosPromise<GetAlertListResponse> {
            return localVarFp.getAlertList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(uuid: string, options?: any): AxiosPromise<Event> {
            return localVarFp.getEvent(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventList(options?: any): AxiosPromise<GetEventListResponse> {
            return localVarFp.getEventList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(uuid: string, options?: any): AxiosPromise<Group> {
            return localVarFp.getGroup(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Filters} filters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupList(filters: Filters, options?: any): AxiosPromise<GetGroupListResponse> {
            return localVarFp.getGroupList(filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendEventRequest} sendEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEvent(sendEventRequest: SendEventRequest, options?: any): AxiosPromise<Event> {
            return localVarFp.sendEvent(sendEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StartTraceRequest} startTraceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTrace(startTraceRequest: StartTraceRequest, options?: any): AxiosPromise<StartTraceResponse> {
            return localVarFp.startTrace(startTraceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AlertConfig} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAlertConfig(body: AlertConfig, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAlertConfig(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGroup(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGroup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAlertConfig(uuid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAlertConfig(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public endTrace(uuid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).endTrace(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fixAlert(uuid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fixAlert(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fixEvent(uuid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fixEvent(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAlertConfigList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAlertConfigList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAlertList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAlertList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEvent(uuid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEvent(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEventList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEventList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGroup(uuid: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGroup(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Filters} filters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGroupList(filters: Filters, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGroupList(filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendEventRequest} sendEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendEvent(sendEventRequest: SendEventRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendEvent(sendEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StartTraceRequest} startTraceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startTrace(startTraceRequest: StartTraceRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startTrace(startTraceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


