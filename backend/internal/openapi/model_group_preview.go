/*
 * API
 *
 * API for traces
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type GroupPreview struct {
	Uuid string `json:"uuid"`

	Title string `json:"title"`

	Duration string `json:"duration"`

	Start string `json:"start"`

	End string `json:"end"`

	Events []Event `json:"events,omitempty"`

	Components []Component `json:"components,omitempty"`
}

// AssertGroupPreviewRequired checks if the required fields are not zero-ed
func AssertGroupPreviewRequired(obj GroupPreview) error {
	elements := map[string]interface{}{
		"uuid":     obj.Uuid,
		"title":    obj.Title,
		"duration": obj.Duration,
		"start":    obj.Start,
		"end":      obj.End,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Events {
		if err := AssertEventRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Components {
		if err := AssertComponentRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseGroupPreviewRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GroupPreview (e.g. [][]GroupPreview), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGroupPreviewRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGroupPreview, ok := obj.(GroupPreview)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGroupPreviewRequired(aGroupPreview)
	})
}
