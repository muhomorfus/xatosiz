/*
 * API
 *
 * API for traces
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Event struct {
	Uuid string `json:"uuid"`

	TraceUuid string `json:"trace_uuid"`

	Message string `json:"message"`

	Priority string `json:"priority"`

	Fixed bool `json:"fixed"`

	Time string `json:"time"`

	Payload map[string]string `json:"payload"`
}

// AssertEventRequired checks if the required fields are not zero-ed
func AssertEventRequired(obj Event) error {
	elements := map[string]interface{}{
		"uuid":       obj.Uuid,
		"trace_uuid": obj.TraceUuid,
		"message":    obj.Message,
		"priority":   obj.Priority,
		"fixed":      obj.Fixed,
		"time":       obj.Time,
		"payload":    obj.Payload,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEventRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Event (e.g. [][]Event), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEventRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEvent, ok := obj.(Event)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEventRequired(aEvent)
	})
}
