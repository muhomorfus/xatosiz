/*
 * API
 *
 * API for traces
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type StartTraceResponse struct {
	Uuid string `json:"uuid"`

	GroupUuid string `json:"group_uuid,omitempty"`

	ParentUuid string `json:"parent_uuid,omitempty"`

	Start string `json:"start"`

	End string `json:"end"`

	Title string `json:"title"`

	Component string `json:"component"`

	Finished bool `json:"finished"`
}

// AssertStartTraceResponseRequired checks if the required fields are not zero-ed
func AssertStartTraceResponseRequired(obj StartTraceResponse) error {
	elements := map[string]interface{}{
		"uuid":      obj.Uuid,
		"start":     obj.Start,
		"end":       obj.End,
		"title":     obj.Title,
		"component": obj.Component,
		"finished":  obj.Finished,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseStartTraceResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of StartTraceResponse (e.g. [][]StartTraceResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseStartTraceResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aStartTraceResponse, ok := obj.(StartTraceResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertStartTraceResponseRequired(aStartTraceResponse)
	})
}
