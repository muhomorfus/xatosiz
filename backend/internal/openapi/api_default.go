/*
 * API
 *
 * API for traces
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"CreateAlertConfig",
			strings.ToUpper("Post"),
			"/alert_configs",
			c.CreateAlertConfig,
		},
		{
			"CreateGroup",
			strings.ToUpper("Post"),
			"/groups",
			c.CreateGroup,
		},
		{
			"DeleteAlertConfig",
			strings.ToUpper("Delete"),
			"/alert_configs/{uuid}",
			c.DeleteAlertConfig,
		},
		{
			"EndTrace",
			strings.ToUpper("Put"),
			"/traces/{uuid}",
			c.EndTrace,
		},
		{
			"FixAlert",
			strings.ToUpper("Delete"),
			"/alerts/{uuid}",
			c.FixAlert,
		},
		{
			"FixEvent",
			strings.ToUpper("Put"),
			"/events/{uuid}",
			c.FixEvent,
		},
		{
			"GetAlertConfigList",
			strings.ToUpper("Get"),
			"/alert_configs",
			c.GetAlertConfigList,
		},
		{
			"GetAlertList",
			strings.ToUpper("Get"),
			"/alerts",
			c.GetAlertList,
		},
		{
			"GetEvent",
			strings.ToUpper("Get"),
			"/events/{uuid}",
			c.GetEvent,
		},
		{
			"GetEventList",
			strings.ToUpper("Get"),
			"/events",
			c.GetEventList,
		},
		{
			"GetGroup",
			strings.ToUpper("Get"),
			"/groups/{uuid}",
			c.GetGroup,
		},
		{
			"GetGroupList",
			strings.ToUpper("Post"),
			"/groups/filter",
			c.GetGroupList,
		},
		{
			"SendEvent",
			strings.ToUpper("Post"),
			"/events",
			c.SendEvent,
		},
		{
			"StartTrace",
			strings.ToUpper("Post"),
			"/traces",
			c.StartTrace,
		},
	}
}

// CreateAlertConfig -
func (c *DefaultApiController) CreateAlertConfig(w http.ResponseWriter, r *http.Request) {
	bodyParam := AlertConfig{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.CreateAlertConfig(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateGroup -
func (c *DefaultApiController) CreateGroup(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.CreateGroup(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteAlertConfig -
func (c *DefaultApiController) DeleteAlertConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	result, err := c.service.DeleteAlertConfig(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EndTrace -
func (c *DefaultApiController) EndTrace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	result, err := c.service.EndTrace(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FixAlert -
func (c *DefaultApiController) FixAlert(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	result, err := c.service.FixAlert(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FixEvent -
func (c *DefaultApiController) FixEvent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	result, err := c.service.FixEvent(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAlertConfigList -
func (c *DefaultApiController) GetAlertConfigList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAlertConfigList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAlertList -
func (c *DefaultApiController) GetAlertList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAlertList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEvent -
func (c *DefaultApiController) GetEvent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	result, err := c.service.GetEvent(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetEventList -
func (c *DefaultApiController) GetEventList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetEventList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetGroup -
func (c *DefaultApiController) GetGroup(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	result, err := c.service.GetGroup(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetGroupList -
func (c *DefaultApiController) GetGroupList(w http.ResponseWriter, r *http.Request) {
	filtersParam := Filters{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&filtersParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFiltersRequired(filtersParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetGroupList(r.Context(), filtersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SendEvent -
func (c *DefaultApiController) SendEvent(w http.ResponseWriter, r *http.Request) {
	sendEventRequestParam := SendEventRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sendEventRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSendEventRequestRequired(sendEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendEvent(r.Context(), sendEventRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// StartTrace -
func (c *DefaultApiController) StartTrace(w http.ResponseWriter, r *http.Request) {
	startTraceRequestParam := StartTraceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&startTraceRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStartTraceRequestRequired(startTraceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.StartTrace(r.Context(), startTraceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
