package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/kav20u129/ppo/backend/internal/ports.TraceRepository -o ./internal/mocks/trace_repository_mock.go -n TraceRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/kav20u129/ppo/backend/internal/domain/models"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// TraceRepositoryMock implements ports.TraceRepository
type TraceRepositoryMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, trace *models.Trace) (tp1 *models.Trace, err error)
	inspectFuncCreate   func(ctx context.Context, trace *models.Trace)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mTraceRepositoryMockCreate

	funcGet          func(ctx context.Context, id uuid.UUID) (tp1 *models.Trace, err error)
	inspectFuncGet   func(ctx context.Context, id uuid.UUID)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mTraceRepositoryMockGet

	funcUpdate          func(ctx context.Context, trace *models.Trace) (err error)
	inspectFuncUpdate   func(ctx context.Context, trace *models.Trace)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mTraceRepositoryMockUpdate
}

// NewTraceRepositoryMock returns a mock for ports.TraceRepository
func NewTraceRepositoryMock(t minimock.Tester) *TraceRepositoryMock {
	m := &TraceRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mTraceRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*TraceRepositoryMockCreateParams{}

	m.GetMock = mTraceRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*TraceRepositoryMockGetParams{}

	m.UpdateMock = mTraceRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*TraceRepositoryMockUpdateParams{}

	return m
}

type mTraceRepositoryMockCreate struct {
	mock               *TraceRepositoryMock
	defaultExpectation *TraceRepositoryMockCreateExpectation
	expectations       []*TraceRepositoryMockCreateExpectation

	callArgs []*TraceRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// TraceRepositoryMockCreateExpectation specifies expectation struct of the TraceRepository.Create
type TraceRepositoryMockCreateExpectation struct {
	mock    *TraceRepositoryMock
	params  *TraceRepositoryMockCreateParams
	results *TraceRepositoryMockCreateResults
	Counter uint64
}

// TraceRepositoryMockCreateParams contains parameters of the TraceRepository.Create
type TraceRepositoryMockCreateParams struct {
	ctx   context.Context
	trace *models.Trace
}

// TraceRepositoryMockCreateResults contains results of the TraceRepository.Create
type TraceRepositoryMockCreateResults struct {
	tp1 *models.Trace
	err error
}

// Expect sets up expected params for TraceRepository.Create
func (mmCreate *mTraceRepositoryMockCreate) Expect(ctx context.Context, trace *models.Trace) *mTraceRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("TraceRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &TraceRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &TraceRepositoryMockCreateParams{ctx, trace}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the TraceRepository.Create
func (mmCreate *mTraceRepositoryMockCreate) Inspect(f func(ctx context.Context, trace *models.Trace)) *mTraceRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for TraceRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by TraceRepository.Create
func (mmCreate *mTraceRepositoryMockCreate) Return(tp1 *models.Trace, err error) *TraceRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("TraceRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &TraceRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &TraceRepositoryMockCreateResults{tp1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the TraceRepository.Create method
func (mmCreate *mTraceRepositoryMockCreate) Set(f func(ctx context.Context, trace *models.Trace) (tp1 *models.Trace, err error)) *TraceRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the TraceRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the TraceRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the TraceRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mTraceRepositoryMockCreate) When(ctx context.Context, trace *models.Trace) *TraceRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("TraceRepositoryMock.Create mock is already set by Set")
	}

	expectation := &TraceRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &TraceRepositoryMockCreateParams{ctx, trace},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up TraceRepository.Create return parameters for the expectation previously defined by the When method
func (e *TraceRepositoryMockCreateExpectation) Then(tp1 *models.Trace, err error) *TraceRepositoryMock {
	e.results = &TraceRepositoryMockCreateResults{tp1, err}
	return e.mock
}

// Create implements ports.TraceRepository
func (mmCreate *TraceRepositoryMock) Create(ctx context.Context, trace *models.Trace) (tp1 *models.Trace, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, trace)
	}

	mm_params := &TraceRepositoryMockCreateParams{ctx, trace}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := TraceRepositoryMockCreateParams{ctx, trace}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("TraceRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the TraceRepositoryMock.Create")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, trace)
	}
	mmCreate.t.Fatalf("Unexpected call to TraceRepositoryMock.Create. %v %v", ctx, trace)
	return
}

// CreateAfterCounter returns a count of finished TraceRepositoryMock.Create invocations
func (mmCreate *TraceRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of TraceRepositoryMock.Create invocations
func (mmCreate *TraceRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to TraceRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mTraceRepositoryMockCreate) Calls() []*TraceRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*TraceRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *TraceRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *TraceRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TraceRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TraceRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to TraceRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to TraceRepositoryMock.Create")
	}
}

type mTraceRepositoryMockGet struct {
	mock               *TraceRepositoryMock
	defaultExpectation *TraceRepositoryMockGetExpectation
	expectations       []*TraceRepositoryMockGetExpectation

	callArgs []*TraceRepositoryMockGetParams
	mutex    sync.RWMutex
}

// TraceRepositoryMockGetExpectation specifies expectation struct of the TraceRepository.Get
type TraceRepositoryMockGetExpectation struct {
	mock    *TraceRepositoryMock
	params  *TraceRepositoryMockGetParams
	results *TraceRepositoryMockGetResults
	Counter uint64
}

// TraceRepositoryMockGetParams contains parameters of the TraceRepository.Get
type TraceRepositoryMockGetParams struct {
	ctx context.Context
	id  uuid.UUID
}

// TraceRepositoryMockGetResults contains results of the TraceRepository.Get
type TraceRepositoryMockGetResults struct {
	tp1 *models.Trace
	err error
}

// Expect sets up expected params for TraceRepository.Get
func (mmGet *mTraceRepositoryMockGet) Expect(ctx context.Context, id uuid.UUID) *mTraceRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("TraceRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &TraceRepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &TraceRepositoryMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the TraceRepository.Get
func (mmGet *mTraceRepositoryMockGet) Inspect(f func(ctx context.Context, id uuid.UUID)) *mTraceRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for TraceRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by TraceRepository.Get
func (mmGet *mTraceRepositoryMockGet) Return(tp1 *models.Trace, err error) *TraceRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("TraceRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &TraceRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &TraceRepositoryMockGetResults{tp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the TraceRepository.Get method
func (mmGet *mTraceRepositoryMockGet) Set(f func(ctx context.Context, id uuid.UUID) (tp1 *models.Trace, err error)) *TraceRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the TraceRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the TraceRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the TraceRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mTraceRepositoryMockGet) When(ctx context.Context, id uuid.UUID) *TraceRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("TraceRepositoryMock.Get mock is already set by Set")
	}

	expectation := &TraceRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &TraceRepositoryMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up TraceRepository.Get return parameters for the expectation previously defined by the When method
func (e *TraceRepositoryMockGetExpectation) Then(tp1 *models.Trace, err error) *TraceRepositoryMock {
	e.results = &TraceRepositoryMockGetResults{tp1, err}
	return e.mock
}

// Get implements ports.TraceRepository
func (mmGet *TraceRepositoryMock) Get(ctx context.Context, id uuid.UUID) (tp1 *models.Trace, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := &TraceRepositoryMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := TraceRepositoryMockGetParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("TraceRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the TraceRepositoryMock.Get")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to TraceRepositoryMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished TraceRepositoryMock.Get invocations
func (mmGet *TraceRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of TraceRepositoryMock.Get invocations
func (mmGet *TraceRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to TraceRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mTraceRepositoryMockGet) Calls() []*TraceRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*TraceRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *TraceRepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *TraceRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TraceRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TraceRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to TraceRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to TraceRepositoryMock.Get")
	}
}

type mTraceRepositoryMockUpdate struct {
	mock               *TraceRepositoryMock
	defaultExpectation *TraceRepositoryMockUpdateExpectation
	expectations       []*TraceRepositoryMockUpdateExpectation

	callArgs []*TraceRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// TraceRepositoryMockUpdateExpectation specifies expectation struct of the TraceRepository.Update
type TraceRepositoryMockUpdateExpectation struct {
	mock    *TraceRepositoryMock
	params  *TraceRepositoryMockUpdateParams
	results *TraceRepositoryMockUpdateResults
	Counter uint64
}

// TraceRepositoryMockUpdateParams contains parameters of the TraceRepository.Update
type TraceRepositoryMockUpdateParams struct {
	ctx   context.Context
	trace *models.Trace
}

// TraceRepositoryMockUpdateResults contains results of the TraceRepository.Update
type TraceRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for TraceRepository.Update
func (mmUpdate *mTraceRepositoryMockUpdate) Expect(ctx context.Context, trace *models.Trace) *mTraceRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("TraceRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &TraceRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &TraceRepositoryMockUpdateParams{ctx, trace}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the TraceRepository.Update
func (mmUpdate *mTraceRepositoryMockUpdate) Inspect(f func(ctx context.Context, trace *models.Trace)) *mTraceRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for TraceRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by TraceRepository.Update
func (mmUpdate *mTraceRepositoryMockUpdate) Return(err error) *TraceRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("TraceRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &TraceRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &TraceRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the TraceRepository.Update method
func (mmUpdate *mTraceRepositoryMockUpdate) Set(f func(ctx context.Context, trace *models.Trace) (err error)) *TraceRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the TraceRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the TraceRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the TraceRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mTraceRepositoryMockUpdate) When(ctx context.Context, trace *models.Trace) *TraceRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("TraceRepositoryMock.Update mock is already set by Set")
	}

	expectation := &TraceRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &TraceRepositoryMockUpdateParams{ctx, trace},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up TraceRepository.Update return parameters for the expectation previously defined by the When method
func (e *TraceRepositoryMockUpdateExpectation) Then(err error) *TraceRepositoryMock {
	e.results = &TraceRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements ports.TraceRepository
func (mmUpdate *TraceRepositoryMock) Update(ctx context.Context, trace *models.Trace) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, trace)
	}

	mm_params := &TraceRepositoryMockUpdateParams{ctx, trace}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := TraceRepositoryMockUpdateParams{ctx, trace}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("TraceRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the TraceRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, trace)
	}
	mmUpdate.t.Fatalf("Unexpected call to TraceRepositoryMock.Update. %v %v", ctx, trace)
	return
}

// UpdateAfterCounter returns a count of finished TraceRepositoryMock.Update invocations
func (mmUpdate *TraceRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of TraceRepositoryMock.Update invocations
func (mmUpdate *TraceRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to TraceRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mTraceRepositoryMockUpdate) Calls() []*TraceRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*TraceRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *TraceRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *TraceRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TraceRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TraceRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to TraceRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to TraceRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TraceRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockGetInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TraceRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TraceRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetDone() &&
		m.MinimockUpdateDone()
}
