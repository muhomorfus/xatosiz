package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/kav20u129/ppo/backend/internal/ports.EventRepository -o ./internal/mocks/event_repository_mock.go -n EventRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/kav20u129/ppo/backend/internal/domain/models"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// EventRepositoryMock implements ports.EventRepository
type EventRepositoryMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, event *models.Event) (ep1 *models.Event, err error)
	inspectFuncCreate   func(ctx context.Context, event *models.Event)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mEventRepositoryMockCreate

	funcGet          func(ctx context.Context, id uuid.UUID) (ep1 *models.Event, err error)
	inspectFuncGet   func(ctx context.Context, id uuid.UUID)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mEventRepositoryMockGet

	funcGetList          func(ctx context.Context, fixed bool) (epa1 []*models.Event, err error)
	inspectFuncGetList   func(ctx context.Context, fixed bool)
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mEventRepositoryMockGetList

	funcUpdate          func(ctx context.Context, trace *models.Event) (err error)
	inspectFuncUpdate   func(ctx context.Context, trace *models.Event)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mEventRepositoryMockUpdate
}

// NewEventRepositoryMock returns a mock for ports.EventRepository
func NewEventRepositoryMock(t minimock.Tester) *EventRepositoryMock {
	m := &EventRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mEventRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*EventRepositoryMockCreateParams{}

	m.GetMock = mEventRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*EventRepositoryMockGetParams{}

	m.GetListMock = mEventRepositoryMockGetList{mock: m}
	m.GetListMock.callArgs = []*EventRepositoryMockGetListParams{}

	m.UpdateMock = mEventRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*EventRepositoryMockUpdateParams{}

	return m
}

type mEventRepositoryMockCreate struct {
	mock               *EventRepositoryMock
	defaultExpectation *EventRepositoryMockCreateExpectation
	expectations       []*EventRepositoryMockCreateExpectation

	callArgs []*EventRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// EventRepositoryMockCreateExpectation specifies expectation struct of the EventRepository.Create
type EventRepositoryMockCreateExpectation struct {
	mock    *EventRepositoryMock
	params  *EventRepositoryMockCreateParams
	results *EventRepositoryMockCreateResults
	Counter uint64
}

// EventRepositoryMockCreateParams contains parameters of the EventRepository.Create
type EventRepositoryMockCreateParams struct {
	ctx   context.Context
	event *models.Event
}

// EventRepositoryMockCreateResults contains results of the EventRepository.Create
type EventRepositoryMockCreateResults struct {
	ep1 *models.Event
	err error
}

// Expect sets up expected params for EventRepository.Create
func (mmCreate *mEventRepositoryMockCreate) Expect(ctx context.Context, event *models.Event) *mEventRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("EventRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &EventRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &EventRepositoryMockCreateParams{ctx, event}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the EventRepository.Create
func (mmCreate *mEventRepositoryMockCreate) Inspect(f func(ctx context.Context, event *models.Event)) *mEventRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for EventRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by EventRepository.Create
func (mmCreate *mEventRepositoryMockCreate) Return(ep1 *models.Event, err error) *EventRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("EventRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &EventRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &EventRepositoryMockCreateResults{ep1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the EventRepository.Create method
func (mmCreate *mEventRepositoryMockCreate) Set(f func(ctx context.Context, event *models.Event) (ep1 *models.Event, err error)) *EventRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the EventRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the EventRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the EventRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mEventRepositoryMockCreate) When(ctx context.Context, event *models.Event) *EventRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("EventRepositoryMock.Create mock is already set by Set")
	}

	expectation := &EventRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &EventRepositoryMockCreateParams{ctx, event},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up EventRepository.Create return parameters for the expectation previously defined by the When method
func (e *EventRepositoryMockCreateExpectation) Then(ep1 *models.Event, err error) *EventRepositoryMock {
	e.results = &EventRepositoryMockCreateResults{ep1, err}
	return e.mock
}

// Create implements ports.EventRepository
func (mmCreate *EventRepositoryMock) Create(ctx context.Context, event *models.Event) (ep1 *models.Event, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, event)
	}

	mm_params := &EventRepositoryMockCreateParams{ctx, event}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := EventRepositoryMockCreateParams{ctx, event}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("EventRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the EventRepositoryMock.Create")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, event)
	}
	mmCreate.t.Fatalf("Unexpected call to EventRepositoryMock.Create. %v %v", ctx, event)
	return
}

// CreateAfterCounter returns a count of finished EventRepositoryMock.Create invocations
func (mmCreate *EventRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of EventRepositoryMock.Create invocations
func (mmCreate *EventRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to EventRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mEventRepositoryMockCreate) Calls() []*EventRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*EventRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *EventRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *EventRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EventRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to EventRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to EventRepositoryMock.Create")
	}
}

type mEventRepositoryMockGet struct {
	mock               *EventRepositoryMock
	defaultExpectation *EventRepositoryMockGetExpectation
	expectations       []*EventRepositoryMockGetExpectation

	callArgs []*EventRepositoryMockGetParams
	mutex    sync.RWMutex
}

// EventRepositoryMockGetExpectation specifies expectation struct of the EventRepository.Get
type EventRepositoryMockGetExpectation struct {
	mock    *EventRepositoryMock
	params  *EventRepositoryMockGetParams
	results *EventRepositoryMockGetResults
	Counter uint64
}

// EventRepositoryMockGetParams contains parameters of the EventRepository.Get
type EventRepositoryMockGetParams struct {
	ctx context.Context
	id  uuid.UUID
}

// EventRepositoryMockGetResults contains results of the EventRepository.Get
type EventRepositoryMockGetResults struct {
	ep1 *models.Event
	err error
}

// Expect sets up expected params for EventRepository.Get
func (mmGet *mEventRepositoryMockGet) Expect(ctx context.Context, id uuid.UUID) *mEventRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("EventRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &EventRepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &EventRepositoryMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the EventRepository.Get
func (mmGet *mEventRepositoryMockGet) Inspect(f func(ctx context.Context, id uuid.UUID)) *mEventRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for EventRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by EventRepository.Get
func (mmGet *mEventRepositoryMockGet) Return(ep1 *models.Event, err error) *EventRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("EventRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &EventRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &EventRepositoryMockGetResults{ep1, err}
	return mmGet.mock
}

// Set uses given function f to mock the EventRepository.Get method
func (mmGet *mEventRepositoryMockGet) Set(f func(ctx context.Context, id uuid.UUID) (ep1 *models.Event, err error)) *EventRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the EventRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the EventRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the EventRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mEventRepositoryMockGet) When(ctx context.Context, id uuid.UUID) *EventRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("EventRepositoryMock.Get mock is already set by Set")
	}

	expectation := &EventRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &EventRepositoryMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up EventRepository.Get return parameters for the expectation previously defined by the When method
func (e *EventRepositoryMockGetExpectation) Then(ep1 *models.Event, err error) *EventRepositoryMock {
	e.results = &EventRepositoryMockGetResults{ep1, err}
	return e.mock
}

// Get implements ports.EventRepository
func (mmGet *EventRepositoryMock) Get(ctx context.Context, id uuid.UUID) (ep1 *models.Event, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := &EventRepositoryMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := EventRepositoryMockGetParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("EventRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the EventRepositoryMock.Get")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to EventRepositoryMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished EventRepositoryMock.Get invocations
func (mmGet *EventRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of EventRepositoryMock.Get invocations
func (mmGet *EventRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to EventRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mEventRepositoryMockGet) Calls() []*EventRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*EventRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *EventRepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *EventRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EventRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to EventRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to EventRepositoryMock.Get")
	}
}

type mEventRepositoryMockGetList struct {
	mock               *EventRepositoryMock
	defaultExpectation *EventRepositoryMockGetListExpectation
	expectations       []*EventRepositoryMockGetListExpectation

	callArgs []*EventRepositoryMockGetListParams
	mutex    sync.RWMutex
}

// EventRepositoryMockGetListExpectation specifies expectation struct of the EventRepository.GetList
type EventRepositoryMockGetListExpectation struct {
	mock    *EventRepositoryMock
	params  *EventRepositoryMockGetListParams
	results *EventRepositoryMockGetListResults
	Counter uint64
}

// EventRepositoryMockGetListParams contains parameters of the EventRepository.GetList
type EventRepositoryMockGetListParams struct {
	ctx   context.Context
	fixed bool
}

// EventRepositoryMockGetListResults contains results of the EventRepository.GetList
type EventRepositoryMockGetListResults struct {
	epa1 []*models.Event
	err  error
}

// Expect sets up expected params for EventRepository.GetList
func (mmGetList *mEventRepositoryMockGetList) Expect(ctx context.Context, fixed bool) *mEventRepositoryMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("EventRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &EventRepositoryMockGetListExpectation{}
	}

	mmGetList.defaultExpectation.params = &EventRepositoryMockGetListParams{ctx, fixed}
	for _, e := range mmGetList.expectations {
		if minimock.Equal(e.params, mmGetList.defaultExpectation.params) {
			mmGetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetList.defaultExpectation.params)
		}
	}

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the EventRepository.GetList
func (mmGetList *mEventRepositoryMockGetList) Inspect(f func(ctx context.Context, fixed bool)) *mEventRepositoryMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for EventRepositoryMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by EventRepository.GetList
func (mmGetList *mEventRepositoryMockGetList) Return(epa1 []*models.Event, err error) *EventRepositoryMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("EventRepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &EventRepositoryMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &EventRepositoryMockGetListResults{epa1, err}
	return mmGetList.mock
}

// Set uses given function f to mock the EventRepository.GetList method
func (mmGetList *mEventRepositoryMockGetList) Set(f func(ctx context.Context, fixed bool) (epa1 []*models.Event, err error)) *EventRepositoryMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the EventRepository.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the EventRepository.GetList method")
	}

	mmGetList.mock.funcGetList = f
	return mmGetList.mock
}

// When sets expectation for the EventRepository.GetList which will trigger the result defined by the following
// Then helper
func (mmGetList *mEventRepositoryMockGetList) When(ctx context.Context, fixed bool) *EventRepositoryMockGetListExpectation {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("EventRepositoryMock.GetList mock is already set by Set")
	}

	expectation := &EventRepositoryMockGetListExpectation{
		mock:   mmGetList.mock,
		params: &EventRepositoryMockGetListParams{ctx, fixed},
	}
	mmGetList.expectations = append(mmGetList.expectations, expectation)
	return expectation
}

// Then sets up EventRepository.GetList return parameters for the expectation previously defined by the When method
func (e *EventRepositoryMockGetListExpectation) Then(epa1 []*models.Event, err error) *EventRepositoryMock {
	e.results = &EventRepositoryMockGetListResults{epa1, err}
	return e.mock
}

// GetList implements ports.EventRepository
func (mmGetList *EventRepositoryMock) GetList(ctx context.Context, fixed bool) (epa1 []*models.Event, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList(ctx, fixed)
	}

	mm_params := &EventRepositoryMockGetListParams{ctx, fixed}

	// Record call args
	mmGetList.GetListMock.mutex.Lock()
	mmGetList.GetListMock.callArgs = append(mmGetList.GetListMock.callArgs, mm_params)
	mmGetList.GetListMock.mutex.Unlock()

	for _, e := range mmGetList.GetListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.epa1, e.results.err
		}
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetList.GetListMock.defaultExpectation.params
		mm_got := EventRepositoryMockGetListParams{ctx, fixed}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetList.t.Errorf("EventRepositoryMock.GetList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the EventRepositoryMock.GetList")
		}
		return (*mm_results).epa1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList(ctx, fixed)
	}
	mmGetList.t.Fatalf("Unexpected call to EventRepositoryMock.GetList. %v %v", ctx, fixed)
	return
}

// GetListAfterCounter returns a count of finished EventRepositoryMock.GetList invocations
func (mmGetList *EventRepositoryMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of EventRepositoryMock.GetList invocations
func (mmGetList *EventRepositoryMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// Calls returns a list of arguments used in each call to EventRepositoryMock.GetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetList *mEventRepositoryMockGetList) Calls() []*EventRepositoryMockGetListParams {
	mmGetList.mutex.RLock()

	argCopy := make([]*EventRepositoryMockGetListParams, len(mmGetList.callArgs))
	copy(argCopy, mmGetList.callArgs)

	mmGetList.mutex.RUnlock()

	return argCopy
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *EventRepositoryMock) MinimockGetListDone() bool {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetListInspect logs each unmet expectation
func (m *EventRepositoryMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventRepositoryMock.GetList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		if m.GetListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EventRepositoryMock.GetList")
		} else {
			m.t.Errorf("Expected call to EventRepositoryMock.GetList with params: %#v", *m.GetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		m.t.Error("Expected call to EventRepositoryMock.GetList")
	}
}

type mEventRepositoryMockUpdate struct {
	mock               *EventRepositoryMock
	defaultExpectation *EventRepositoryMockUpdateExpectation
	expectations       []*EventRepositoryMockUpdateExpectation

	callArgs []*EventRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// EventRepositoryMockUpdateExpectation specifies expectation struct of the EventRepository.Update
type EventRepositoryMockUpdateExpectation struct {
	mock    *EventRepositoryMock
	params  *EventRepositoryMockUpdateParams
	results *EventRepositoryMockUpdateResults
	Counter uint64
}

// EventRepositoryMockUpdateParams contains parameters of the EventRepository.Update
type EventRepositoryMockUpdateParams struct {
	ctx   context.Context
	trace *models.Event
}

// EventRepositoryMockUpdateResults contains results of the EventRepository.Update
type EventRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for EventRepository.Update
func (mmUpdate *mEventRepositoryMockUpdate) Expect(ctx context.Context, trace *models.Event) *mEventRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("EventRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &EventRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &EventRepositoryMockUpdateParams{ctx, trace}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the EventRepository.Update
func (mmUpdate *mEventRepositoryMockUpdate) Inspect(f func(ctx context.Context, trace *models.Event)) *mEventRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for EventRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by EventRepository.Update
func (mmUpdate *mEventRepositoryMockUpdate) Return(err error) *EventRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("EventRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &EventRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &EventRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the EventRepository.Update method
func (mmUpdate *mEventRepositoryMockUpdate) Set(f func(ctx context.Context, trace *models.Event) (err error)) *EventRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the EventRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the EventRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the EventRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mEventRepositoryMockUpdate) When(ctx context.Context, trace *models.Event) *EventRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("EventRepositoryMock.Update mock is already set by Set")
	}

	expectation := &EventRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &EventRepositoryMockUpdateParams{ctx, trace},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up EventRepository.Update return parameters for the expectation previously defined by the When method
func (e *EventRepositoryMockUpdateExpectation) Then(err error) *EventRepositoryMock {
	e.results = &EventRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements ports.EventRepository
func (mmUpdate *EventRepositoryMock) Update(ctx context.Context, trace *models.Event) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, trace)
	}

	mm_params := &EventRepositoryMockUpdateParams{ctx, trace}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := EventRepositoryMockUpdateParams{ctx, trace}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("EventRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the EventRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, trace)
	}
	mmUpdate.t.Fatalf("Unexpected call to EventRepositoryMock.Update. %v %v", ctx, trace)
	return
}

// UpdateAfterCounter returns a count of finished EventRepositoryMock.Update invocations
func (mmUpdate *EventRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of EventRepositoryMock.Update invocations
func (mmUpdate *EventRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to EventRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mEventRepositoryMockUpdate) Calls() []*EventRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*EventRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *EventRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *EventRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EventRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to EventRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to EventRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EventRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockGetInspect()

		m.MinimockGetListInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EventRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EventRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetDone() &&
		m.MinimockGetListDone() &&
		m.MinimockUpdateDone()
}
